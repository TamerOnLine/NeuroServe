name: CI (Linux)

on:
  push:
    branches: ["**"]
    paths-ignore:
      - "*.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"
  pull_request:
    branches: ["**"]
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - "*.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    name: "Lint & Test | py${{ matrix.python }} | ubuntu"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python: ["3.12", "3.13"]

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}
          cache: pip
          cache-dependency-path: |
            **/requirements*.txt
            **/pyproject.toml
            **/setup.cfg
            **/setup.py

      - name: Show environment
        run: |
          python -V
          pip -V
          uname -a

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install ruff pytest pytest-xdist pytest-cov coverage

      - name: "Install project deps (auto-detect: pip/uv/poetry)"
        run: |
          set -eo pipefail
          export PYTHONPATH="$GITHUB_WORKSPACE:$PYTHONPATH"

          if [ -f "uv.lock" ] || grep -qi 'tool\.uv' pyproject.toml 2>/dev/null; then
            echo "[deps] Using uv"
            python -m pip install uv
            uv pip install -r requirements.txt 2>/dev/null || true
            uv pip install -e . 2>/dev/null || true

          elif [ -f "poetry.lock" ]; then
            echo "[deps] Using poetry"
            python -m pip install pipx
            pipx install poetry
            poetry install --no-interaction --no-root
            poetry run pip install -e . || true
            # نعرّف المتغيّر للجُزء التالي من الجوب
            echo "POETRY_RUN=1" >> "$GITHUB_ENV"

          else
            echo "[deps] Using pip"
            if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
            if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
              python -m pip install -e .
            fi
          fi

      - name: Lint (ruff)
        run: |
          if git ls-files '*.py' | grep -q .; then
            python -m ruff check .
          else
            echo "No Python files detected; skipping lint."
          fi

      - name: Run tests (coverage + fallback without slow)
        env:
          PYTEST_ADDOPTS: "-r fEsxX --maxfail=1 --disable-warnings"
        run: |
          # استخدم متغيّر الشِل وليس تعبيرات GitHub داخل السكربت
          if [ "${POETRY_RUN:-}" = "1" ]; then
            RUN="poetry run"
          else
            RUN="python -m"
          fi

          set +e
          $RUN pytest -q --junitxml=pytest.xml --cov=. --cov-report=xml --cov-report=term-missing
          rc=$?
          if [ $rc -ne 0 ]; then
            echo "Full test run failed → retrying with -k 'not slow'"
            $RUN pytest -q -k "not slow" --junitxml=pytest.xml --cov=. --cov-report=xml --cov-report=term-missing
            rc=$?
          fi
          exit $rc

      - name: Upload JUnit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-ubuntu-py${{ matrix.python }}
          path: pytest.xml
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-ubuntu-py${{ matrix.python }}
          path: |
            coverage.xml
            .coverage*
          if-no-files-found: ignore
          retention-days: 7
