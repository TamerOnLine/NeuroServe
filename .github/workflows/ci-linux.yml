name: CI (CPU, 3 OS) - Linux
jobs:
  test:
    name: ${{ matrix.os }} / py${{ matrix.python }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python:
        - '3.12'
    env:
      DEVICE: cpu
      CI_LIGHT_MODE: '1'
      PLUGINS_ALLOW: dummy
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Detect project root
      id: proj
      shell: bash
      run: "set -e\nROOT=\"$(dirname \"$(git ls-files | grep -E '(^|/)app/main\\.py$'\
        \ | head -n1)\")\"\nif [ -z \"$ROOT\" ]; then\n  echo \"app/main.py not found\
        \ anywhere in the repo.\" >&2\n  exit 1\nfi\n[ \"$ROOT\" = \".\" ] && ROOT=\"\
        .\"\necho \"PROJECT_DIR=$ROOT\" >> \"$GITHUB_ENV\"\necho \"Detected PROJECT_DIR=$ROOT\"\
        \n"
    - name: Set HF cache env (Unix)
      if: runner.os != 'Windows'
      run: echo "HF_HOME=/tmp/hf-cache" >> $GITHUB_ENV
    - name: Set HF cache env (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: echo "HF_HOME=C:\hf-temp" >> $env:GITHUB_ENV
    - name: Free disk space (Linux only)
      if: runner.os == 'Linux'
      run: 'sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android

        df -h

        '
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python }}
        cache: pip
    - name: Install dependencies
      shell: bash
      run: "set -e\npython -m pip install --upgrade pip\nif [ -f requirements.txt\
        \ ]; then\n  pip install -r requirements.txt\nelif [ -f \"$PROJECT_DIR/requirements.txt\"\
        \ ]; then\n  pip install -r \"$PROJECT_DIR/requirements.txt\"\nelse\n  pip\
        \ install fastapi \"uvicorn>=0.30\"\nfi\n"
    - name: Start server (Unix)
      if: runner.os != 'Windows'
      run: 'set -e

        cd "$PROJECT_DIR"

        nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 --no-access-log --log-level
        info > server.log 2>&1 &

        echo $! > uvicorn.pid

        echo "Started PID: $(cat uvicorn.pid)"

        '
    - name: Wait for /health (Unix, up to 180s)
      if: runner.os != 'Windows'
      run: "cd \"$PROJECT_DIR\"\nfor i in {1..180}; do\n  if curl -fsS http://127.0.0.1:8000/health\
        \ >/dev/null; then\n    echo \"Server is up ✅\"; exit 0\n  fi\n  echo \"Waiting...\
        \ ($i)\"; sleep 1\n  if [ $((i % 15)) -eq 0 ] && [ -f server.log ]; then\n\
        \    echo; echo \"--- server.log (tail) ---\"; tail -n 40 server.log\n  fi\n\
        done\necho \"Server did not start ❌\"\n[ -f server.log ] && { echo; echo \"\
        --- server.log (tail) ---\"; tail -n 200 server.log; }\nexit 1\n"
    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: "cd \"$PROJECT_DIR\"\nset +e\nif python -c \"import importlib.util, sys;\
        \ sys.exit(0 if importlib.util.find_spec('scripts.test_api') else 1)\"; then\n\
        \  python -m scripts.test_api\nelse\n  echo \"scripts.test_api not found,\
        \ doing a light probe...\"\n  curl -fsS http://127.0.0.1:8000/health && echo\
        \ \"Health OK\"\n  curl -fsS http://127.0.0.1:8000/plugins || true\nfi\ncode=$?\n\
        if [ $code -ne 0 ]; then\n  echo \"Tests failed ❌ (exit $code)\"\n  [ -f server.log\
        \ ] && { echo; echo \"--- server.log (tail) ---\"; tail -n 200 server.log;\
        \ }\n  exit $code\nfi\necho \"Tests passed ✅\"\n"
    - name: Stop server (Unix)
      if: always() && runner.os != 'Windows'
      run: "cd \"$PROJECT_DIR\"\nif [ -f uvicorn.pid ]; then\n  kill $(cat uvicorn.pid)\
        \ 2>/dev/null || true\nfi\n"
    - name: Start server (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: "python -V\nSet-Location \"$env:PROJECT_DIR\"\nWrite-Host \"PROJECT_DIR\
        \ = $env:PROJECT_DIR\"\nGet-Location\nWrite-Host \"Listing PROJECT_DIR:\"\
        ; Get-ChildItem -Name\n\n# Decide module by files\n$module = $null\nif (Test-Path\
        \ \".\\app\\main.py\") { $module = \"app.main\" }\nelseif (Test-Path \".\\\
        main.py\")  { $module = \"main\" }\nelse {\n  Write-Error \"Neither app/main.py\
        \ nor main.py found in $env:PROJECT_DIR\"\n  exit 1\n}\n\n# Verify module\
        \ exposes `app` and ensure cwd is on sys.path\npython -c \"import sys,os,importlib;\
        \ sys.path.insert(0, os.getcwd()); m=importlib.import_module('$module'); sys.exit(0\
        \ if hasattr(m,'app') else 3)\"\nif ($LASTEXITCODE -ne 0) {\n  Write-Error\
        \ \"Module '$module' does not expose attribute 'app'\"\n  exit 1\n}\n$entry\
        \ = \"$module:app\"\nWrite-Host \"Using entrypoint: $entry\"\n\n# Prepare\
        \ logs early\n'' | Out-File server.out.log -Encoding utf8\n'' | Out-File server.err.log\
        \ -Encoding utf8\n\n# Ensure port 8000 is free\n$busy = Get-NetTCPConnection\
        \ -ErrorAction SilentlyContinue | Where-Object { $_.LocalPort -eq 8000 -and\
        \ $_.State -eq 'Listen' }\nif ($busy) { Write-Error \"Port 8000 is busy.\"\
        ; exit 1 }\n\n# Start Uvicorn in background\n$args = @(\n  \"-m\",\"uvicorn\"\
        ,$entry,\n  \"--host\",\"127.0.0.1\",\"--port\",\"8000\",\n  \"--no-access-log\"\
        ,\"--log-level\",\"info\"\n)\n$p = Start-Process -FilePath \"python\" -ArgumentList\
        \ $args `\n    -NoNewWindow -PassThru `\n    -RedirectStandardOutput \"server.out.log\"\
        \ `\n    -RedirectStandardError  \"server.err.log\"\n$p.Id | Out-File -FilePath\
        \ uvicorn.pid -Encoding ascii\nWrite-Host \"Started PID: $($p.Id)\"\n\n\n\n\
        \  - name: Run tests (Windows)\n    if: runner.os == 'Windows'\n    shell:\
        \ pwsh\n    run: |\n      Set-Location \"$env:PROJECT_DIR\"\n      # Check\
        \ if scripts.test_api exists\n      $pyCheck = @\"\n      import importlib.util,\
        \ sys\n      sys.exit(0 if importlib.util.find_spec(\"scripts.test_api\")\
        \ else 1)\n      \"@\n      $tmpCheck = New-TemporaryFile\n      Set-Content\
        \ -Path $tmpCheck -Value $pyCheck -Encoding UTF8\n      python $tmpCheck\n\
        \      $exists = $LASTEXITCODE -eq 0\n      Remove-Item $tmpCheck -Force\n\
        \n      $code = 0\n      if ($exists) {\n        python -m scripts.test_api\n\
        \        $code = $LASTEXITCODE\n      } else {\n        Write-Host \"scripts.test_api\
        \ not found, doing a light probe...\"\n        try { Invoke-RestMethod -Uri\
        \ \"http://127.0.0.1:8000/health\" -TimeoutSec 5 | Out-Null } catch { $code\
        \ = 1 }\n        try { Invoke-RestMethod -Uri \"http://127.0.0.1:8000/plugins\"\
        \ -TimeoutSec 5 | Out-Null } catch {}\n      }\n\n      if ($code -ne 0) {\n\
        \        Write-Host \"`nTests failed with exit code $code ❌\"\n        if\
        \ (Test-Path server.err.log) { Write-Host \"`n--- server.err.log (tail) ---\"\
        ; Get-Content server.err.log -Tail 200 }\n        if (Test-Path server.out.log)\
        \ { Write-Host \"`n--- server.out.log (tail) ---\"; Get-Content server.out.log\
        \ -Tail 200 }\n        exit $code\n      } else {\n        Write-Host \"Tests\
        \ passed ✅\"\n      }\n"
    - name: Stop server (Windows)
      if: always() && runner.os == 'Windows'
      shell: pwsh
      run: "Set-Location \"$env:PROJECT_DIR\"\nif (Test-Path uvicorn.pid) {\n  $uvPid\
        \ = (Get-Content uvicorn.pid | ForEach-Object { $_.Trim() }) | Select-Object\
        \ -First 1\n  if ($uvPid) { Stop-Process -Id $uvPid -Force -ErrorAction SilentlyContinue\
        \ }\n}\n"
    - name: Upload logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v4.3.1
      with:
        name: logs-${{ matrix.os }}
        path: '**/server.log

          **/server.out.log

          **/server.err.log

          '
        if-no-files-found: ignore
