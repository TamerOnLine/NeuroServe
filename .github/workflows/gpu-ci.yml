name: GPU CI (Windows self-hosted)

on:
  push:
    branches:
      - main
      - "releases/**"
  workflow_dispatch:

jobs:
  test-gpu:
    runs-on: [self-hosted, Windows, X64]
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Allow PowerShell scripts in this job
        shell: powershell
        run: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Show runner & GPU info
        shell: pwsh
        run: |
          $PSVersionTable | Format-List
          if (Get-Command nvidia-smi -ErrorAction SilentlyContinue) {
            nvidia-smi
          } else {
            Write-Host "nvidia-smi not found"
          }

      - name: Install Python deps (FastAPI, Uvicorn, Torch CUDA)
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn[standard]
          # NOTE: cu121 assumes a driver compatible with CUDA 12.1; change if needed (e.g., cu118)
          pip install --index-url https://download.pytorch.org/whl/cu121 torch

      - name: Torch CUDA sanity check
        shell: pwsh
        run: |
          python - << 'PY'
          import torch
          print("Torch:", torch.__version__)
          print("CUDA available:", torch.cuda.is_available())
          print("Device count:", torch.cuda.device_count())
          if torch.cuda.is_available():
              print("Device 0:", torch.cuda.get_device_name(0))
          PY

      - name: Run Uvicorn locally (background) and probe /health
        shell: pwsh
        run: |
          # Start Uvicorn in the background on localhost
          $args = @(
            "-m","uvicorn","app.main:app",
            "--host","127.0.0.1",
            "--port","8000",
            "--no-access-log",
            "--log-level","info"
          )
          $p = Start-Process -FilePath python -ArgumentList $args -PassThru
          Start-Sleep -Seconds 10

          # Call open /health (no auth required)
          Invoke-RestMethod -Uri "http://127.0.0.1:8000/health" -TimeoutSec 20 | Format-List

          # Stop server
          if ($p -and !$p.HasExited) { Stop-Process -Id $p.Id -Force }

      - name: (Optional) Probe /matmul
        if: always()
        shell: pwsh
        run: |
          try {
            Invoke-RestMethod -Uri "http://127.0.0.1:8000/matmul" -Method POST `
              -ContentType "application/json" -Body '{"n":1024}' | Format-List
          } catch {
            Write-Host "Skipping /matmul (endpoint may not exist)."
          }
