name: CI (CPU, 3 OS)

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  test:
    name: "${{ matrix.os }} / py${{ matrix.python }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.12"]

    env:
      DEVICE: "cpu"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # ---------- Linux/macOS ----------
      - name: Start server (Unix)
        if: runner.os != 'Windows'
        run: |
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
          echo $! > uvicorn.pid

      - name: Wait for /health (Unix)
        if: runner.os != 'Windows'
        run: |
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:8000/health >/dev/null; then
              echo "Server is up"; exit 0
            fi
            echo "Waiting... ($i)"; sleep 1
          done
          echo "Server did not start"; cat server.log || true; exit 1

      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        run: python -m scripts.test_api

      # ---------- Windows ----------
      - name: Start server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Start-Process -FilePath "python" -ArgumentList "-m","uvicorn","app.main:app","--host","127.0.0.1","--port","8000" -NoNewWindow

      - name: Wait for /health (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ok = $false
          for ($i=1; $i -le 30; $i++) {
            try {
              $r = Invoke-WebRequest -Uri "http://127.0.0.1:8000/health" -UseBasicParsing -TimeoutSec 2
              if ($r.StatusCode -eq 200) { $ok = $true; break }
            } catch { Start-Sleep -Seconds 1 }
            Write-Host "Waiting... ($i)"
            Start-Sleep -Seconds 1
          }
          if (-not $ok) {
            Write-Host "Server did not start. Showing logs:"
            if (Test-Path server.log) { Get-Content server.log -TotalCount 200 }
            exit 1
          }

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: python -m scripts.test_api
