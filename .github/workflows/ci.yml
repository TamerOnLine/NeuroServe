name: CI (CPU, 3 OS)

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  test:
    name: "${{ matrix.os }} / py${{ matrix.python }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.12"]

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_NO_PYTHON_VERSION_WARNING: "1"
      DEVICE: "cpu"
      HF_HUB_ENABLE_HF_TRANSFER: "1"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"

      - name: Install base deps (Unix)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash
        if: runner.os != 'Windows'

      - name: Install base deps (Windows)
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Install PyTorch (CPU)
        run: python -m scripts.install_torch
        shell: bash
        if: runner.os != 'Windows'

      - name: Install PyTorch (CPU / Windows)
        run: python -m scripts.install_torch
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Sanity import (Unix)
        run: |
          python - << 'PY'
          import torch, fastapi
          print("Torch:", torch.__version__)
          print("CUDA available?", torch.cuda.is_available())
          PY
        shell: bash
        if: runner.os != 'Windows'

      - name: Sanity import (Windows)
        run: |
          python - << 'PY'
          import torch, fastapi
          print("Torch:", torch.__version__)
          print("CUDA available?", torch.cuda.is_available())
          PY
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Start server (Unix)
        run: |
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
          echo $! > uvicorn.pid
          sleep 4
        shell: bash
        if: runner.os != 'Windows'

      - name: Start server (Windows)
        run: |
          Start-Process -FilePath "python" -ArgumentList "-m", "uvicorn", "app.main:app", "--host", "127.0.0.1", "--port", "8000" -NoNewWindow
          Start-Sleep -Seconds 6
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Smoke tests (Unix)
        run: |
          python -m scripts.test_api
          python - << 'PY'
          import urllib.request
          print("GET /health ->", urllib.request.urlopen("http://127.0.0.1:8000/health").read().decode())
          print("POST /matmul ->", urllib.request.urlopen(
              urllib.request.Request("http://127.0.0.1:8000/matmul",
                 data=b'{"n":1024}', headers={"Content-Type":"application/json"}, method="POST")
          ).read().decode()[:180], "...")
          PY
        shell: bash
        if: runner.os != 'Windows'

      - name: Smoke tests (Windows)
        run: |
          python -m scripts.test_api
          python - << 'PY'
          import urllib.request
          print("GET /health ->", urllib.request.urlopen("http://127.0.0.1:8000/health").read().decode())
          print("POST /matmul ->", urllib.request.urlopen(
              urllib.request.Request("http://127.0.0.1:8000/matmul",
                 data=b'{"n":1024}', headers={"Content-Type":"application/json"}, method="POST")
          ).read().decode()[:180], "...")
          PY
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Show server logs on failure
        if: failure() && runner.os != 'Windows'
        run: |
          echo "=========== server.log ==========="
          cat server.log || true
        shell: bash
