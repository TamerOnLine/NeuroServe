name: CI (CPU, 3 OS)

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  test:
    name: "${{ matrix.os }} / py${{ matrix.python }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.12"]

    env:
      DEVICE: "cpu"
      CI_LIGHT_MODE: "1"
      PLUGINS_ALLOW: "dummy"

    steps:
      - uses: actions/checkout@v4

      # إعداد كاش HF على Unix (بدون TRANSFORMERS_CACHE لتفادي التحذير)
      - name: Set HF cache env (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "HF_HOME=/tmp/hf-cache" >> $GITHUB_ENV

      # إعداد كاش HF على Windows
      - name: Set HF cache env (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "HF_HOME=C:\hf-temp" >> $env:GITHUB_ENV

      # تفريغ مساحة على Ubuntu
      - name: Free disk space (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android
          df -h

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install fastapi uvicorn[standard]
          fi

      # ---------- Unix (Linux/macOS) ----------
      - name: Start server (Unix)
        if: runner.os != 'Windows'
        run: |
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 --no-access-log --log-level info > server.log 2>&1 &
          echo $! > uvicorn.pid
          echo "Started PID: $(cat uvicorn.pid)"

      - name: Wait for /health (Unix, up to 180s)
        if: runner.os != 'Windows'
        run: |
          for i in {1..180}; do
            if curl -fsS http://127.0.0.1:8000/health >/dev/null; then
              echo "Server is up ✅"; exit 0
            fi
            echo "Waiting... ($i)"; sleep 1
          done
          echo "Server did not start ❌"
          [ -f server.log ] && tail -n 200 server.log || true
          exit 1

      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        run: |
          python -m scripts.test_api || { echo 'Tests failed ❌'; [ -f server.log ] && tail -n 200 server.log; exit 1; }

      - name: Stop server (Unix)
        if: always() && runner.os != 'Windows'
        run: |
          if [ -f uvicorn.pid ]; then
            kill $(cat uvicorn.pid) 2>/dev/null || true
          fi

      # ---------- Windows ----------
      - name: Start server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $args = @(
            "-m","uvicorn","app.main:app",
            "--host","127.0.0.1","--port","8000",
            "--no-access-log","--log-level","info"
          )
          if (Test-Path server.out.log) { Remove-Item server.out.log -Force }
          if (Test-Path server.err.log) { Remove-Item server.err.log -Force }

          $p = Start-Process -FilePath "python" -ArgumentList $args -NoNewWindow `
              -RedirectStandardOutput "server.out.log" `
              -RedirectStandardError  "server.err.log" -PassThru
          $p.Id | Out-File -FilePath uvicorn.pid -Encoding ascii
          "Started PID: $($p.Id)"

      - name: Wait for /health (Windows, up to 300s)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ok = $false
          for ($i=1; $i -le 300; $i++) {
            try {
              $r = Invoke-WebRequest -Uri "http://127.0.0.1:8000/health" -TimeoutSec 3
              if ($r.StatusCode -eq 200) { $ok = $true; break }
            } catch { Start-Sleep -Seconds 1 }
            Write-Host "Waiting... ($i)"; Start-Sleep -Seconds 1
          }
          if (-not $ok) {
            Write-Host "Server did not start ❌"
            if (Test-Path server.out.log) { Write-Host "`n--- server.out.log (tail) ---"; Get-Content server.out.log -Tail 200 }
            if (Test-Path server.err.log) { Write-Host "`n--- server.err.log (tail) ---"; Get-Content server.err.log -Tail 200 }
            exit 1
          } else {
            Write-Host "Server is up ✅"
            try { Invoke-RestMethod -Uri "http://127.0.0.1:8000/health" -TimeoutSec 5 | ConvertTo-Json -Depth 5 | Write-Host } catch {}
            try { Invoke-RestMethod -Uri "http://127.0.0.1:8000/plugins" -TimeoutSec 5 | ConvertTo-Json -Depth 5 | Write-Host } catch {}
          }

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m scripts.test_api
          $code = $LASTEXITCODE
          if ($code -ne 0) {
            Write-Host "`nTests failed with exit code $code ❌"
            if (Test-Path server.out.log) { Write-Host "`n--- server.out.log (tail) ---"; Get-Content server.out.log -Tail 200 }
            if (Test-Path server.err.log) { Write-Host "`n--- server.err.log (tail) ---"; Get-Content server.err.log -Tail 200 }
            exit $code
          } else {
            Write-Host "Tests passed ✅"
          }

      - name: Stop server (Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path uvicorn.pid) {
            $uvPid = (Get-Content uvicorn.pid | ForEach-Object { $_.Trim() }) | Select-Object -First 1
            if ($uvPid) { Stop-Process -Id $uvPid -Force -ErrorAction SilentlyContinue }
          }

      # ---------- Logs on failure ----------
      - name: Upload logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4.3.1
        with:
          name: logs-${{ matrix.os }}
          path: |
            server.log
            server.out.log
            server.err.log
          if-no-files-found: ignore
