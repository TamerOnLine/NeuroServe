name: CI (CPU, 3 OS)

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  test:
    name: "${{ matrix.os }} / py${{ matrix.python }}"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.12"]

    env:
      DEVICE: "cpu"
      CI_LIGHT_MODE: "1"
      PLUGINS_ALLOW: "dummy"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Detect the project root (folder that contains app/main.py) ----------
      - name: Detect project root
        id: proj
        shell: bash
        run: |
          set -e
          ROOT="$(dirname "$(git ls-files | grep -E '(^|/)app/main\.py$' | head -n1)")"
          if [ -z "$ROOT" ]; then
            echo "app/main.py not found anywhere in the repo." >&2
            exit 1
          fi
          [ "$ROOT" = "." ] && ROOT="."
          echo "PROJECT_DIR=$ROOT" >> "$GITHUB_ENV"
          echo "Detected PROJECT_DIR=$ROOT"

      # ---------- HF cache ----------
      - name: Set HF cache env (Unix)
        if: runner.os != 'Windows'
        run: echo "HF_HOME=/tmp/hf-cache" >> $GITHUB_ENV

      - name: Set HF cache env (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: echo "HF_HOME=C:\hf-temp" >> $env:GITHUB_ENV

      # ---------- Free disk on Ubuntu ----------
      - name: Free disk space (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android
          df -h

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"

      - name: Install dependencies
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f "$PROJECT_DIR/requirements.txt" ]; then
            pip install -r "$PROJECT_DIR/requirements.txt"
          else
            pip install fastapi "uvicorn>=0.30"
          fi

      # =========================
      # ========  UNIX  =========
      # =========================
      - name: Start server (Unix)
        if: runner.os != 'Windows'
        run: |
          set -e
          cd "$PROJECT_DIR"
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 --no-access-log --log-level info > server.log 2>&1 &
          echo $! > uvicorn.pid
          echo "Started PID: $(cat uvicorn.pid)"

      - name: Wait for /health (Unix, up to 180s)
        if: runner.os != 'Windows'
        run: |
          cd "$PROJECT_DIR"
          for i in {1..180}; do
            if curl -fsS http://127.0.0.1:8000/health >/dev/null; then
              echo "Server is up ✅"; exit 0
            fi
            echo "Waiting... ($i)"; sleep 1
            if [ $((i % 15)) -eq 0 ] && [ -f server.log ]; then
              echo; echo "--- server.log (tail) ---"; tail -n 40 server.log
            fi
          done
          echo "Server did not start ❌"
          [ -f server.log ] && { echo; echo "--- server.log (tail) ---"; tail -n 200 server.log; }
          exit 1

      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        run: |
          cd "$PROJECT_DIR"
          set +e
          if python -c "import importlib.util, sys; sys.exit(0 if importlib.util.find_spec('scripts.test_api') else 1)"; then
            python -m scripts.test_api
          else
            echo "scripts.test_api not found, doing a light probe..."
            curl -fsS http://127.0.0.1:8000/health && echo "Health OK"
            curl -fsS http://127.0.0.1:8000/plugins || true
          fi
          code=$?
          if [ $code -ne 0 ]; then
            echo "Tests failed ❌ (exit $code)"
            [ -f server.log ] && { echo; echo "--- server.log (tail) ---"; tail -n 200 server.log; }
            exit $code
          fi
          echo "Tests passed ✅"

      - name: Stop server (Unix)
        if: always() && runner.os != 'Windows'
        run: |
          cd "$PROJECT_DIR"
          if [ -f uvicorn.pid ]; then
            kill $(cat uvicorn.pid) 2>/dev/null || true
          fi

      # =========================
      # ======= WINDOWS =========
      # =========================

      - name: Start server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -V
          Set-Location "$env:PROJECT_DIR"
          Write-Host "PROJECT_DIR = $env:PROJECT_DIR"
          Get-Location
          Write-Host "Listing PROJECT_DIR:"; Get-ChildItem -Name

          # Decide module by files
          $module = $null
          if (Test-Path ".\app\main.py") { $module = "app.main" }
          elseif (Test-Path ".\main.py")  { $module = "main" }
          else {
            Write-Error "Neither app/main.py nor main.py found in $env:PROJECT_DIR"
            exit 1
          }

          # Verify module exposes `app` and ensure cwd is on sys.path
          python -c "import sys,os,importlib; sys.path.insert(0, os.getcwd()); m=importlib.import_module('$module'); sys.exit(0 if hasattr(m,'app') else 3)"
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Module '$module' does not expose attribute 'app'"
            exit 1
          }
          $entry = "$module:app"
          Write-Host "Using entrypoint: $entry"

          # Prepare logs early
          '' | Out-File server.out.log -Encoding utf8
          '' | Out-File server.err.log -Encoding utf8

          # Ensure port 8000 is free
          $busy = Get-NetTCPConnection -ErrorAction SilentlyContinue | Where-Object { $_.LocalPort -eq 8000 -and $_.State -eq 'Listen' }
          if ($busy) { Write-Error "Port 8000 is busy."; exit 1 }

          # Start Uvicorn in background
          $args = @(
            "-m","uvicorn",$entry,
            "--host","127.0.0.1","--port","8000",
            "--no-access-log","--log-level","info"
          )
          $p = Start-Process -FilePath "python" -ArgumentList $args `
              -NoNewWindow -PassThru `
              -RedirectStandardOutput "server.out.log" `
              -RedirectStandardError  "server.err.log"
          $p.Id | Out-File -FilePath uvicorn.pid -Encoding ascii
          Write-Host "Started PID: $($p.Id)"



            - name: Run tests (Windows)
              if: runner.os == 'Windows'
              shell: pwsh
              run: |
                Set-Location "$env:PROJECT_DIR"
                # Check if scripts.test_api exists
                $pyCheck = @"
                import importlib.util, sys
                sys.exit(0 if importlib.util.find_spec("scripts.test_api") else 1)
                "@
                $tmpCheck = New-TemporaryFile
                Set-Content -Path $tmpCheck -Value $pyCheck -Encoding UTF8
                python $tmpCheck
                $exists = $LASTEXITCODE -eq 0
                Remove-Item $tmpCheck -Force

                $code = 0
                if ($exists) {
                  python -m scripts.test_api
                  $code = $LASTEXITCODE
                } else {
                  Write-Host "scripts.test_api not found, doing a light probe..."
                  try { Invoke-RestMethod -Uri "http://127.0.0.1:8000/health" -TimeoutSec 5 | Out-Null } catch { $code = 1 }
                  try { Invoke-RestMethod -Uri "http://127.0.0.1:8000/plugins" -TimeoutSec 5 | Out-Null } catch {}
                }

                if ($code -ne 0) {
                  Write-Host "`nTests failed with exit code $code ❌"
                  if (Test-Path server.err.log) { Write-Host "`n--- server.err.log (tail) ---"; Get-Content server.err.log -Tail 200 }
                  if (Test-Path server.out.log) { Write-Host "`n--- server.out.log (tail) ---"; Get-Content server.out.log -Tail 200 }
                  exit $code
                } else {
                  Write-Host "Tests passed ✅"
                }

      - name: Stop server (Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-Location "$env:PROJECT_DIR"
          if (Test-Path uvicorn.pid) {
            $uvPid = (Get-Content uvicorn.pid | ForEach-Object { $_.Trim() }) | Select-Object -First 1
            if ($uvPid) { Stop-Process -Id $uvPid -Force -ErrorAction SilentlyContinue }
          }

      # ---------- Upload logs on failure ----------
      - name: Upload logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4.3.1
        with:
          name: logs-${{ matrix.os }}
          path: |
            **/server.log
            **/server.out.log
            **/server.err.log
          if-no-files-found: ignore
